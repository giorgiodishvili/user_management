plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'checkstyle'
    id 'pmd'
    id "com.diffplug.spotless" version "6.25.0"
    id "se.solrike.sonarlint" version "2.0.0"
}

group = 'com.gv'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()

}

ext {
    set('springCloudVersion', "2022.0.3")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.postgresql:postgresql'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.flywaydb:flyway-core'
//    implementation 'org.flywaydb:flyway-database-postgresql'
//    implementation 'com.h2database:h2'

    implementation "com.hazelcast:hazelcast"
    implementation "com.hazelcast:hazelcast-spring"
    implementation "org.springframework.boot:spring-boot-starter-cache"

    // https://projectlombok.org
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // pmd
    pmd 'io.github.dgroup:arch4u-pmd:0.1.0'
    pmd 'commons-io:commons-io:2.11.0'

    // mapstruct
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "org.testcontainers:kafka"
}


checkstyle {
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    checkstyleTest.enabled = false
}

checkstyleMain {
    source = 'src/main/java'
}

pmd {
    consoleOutput = true
    toolVersion = "6.21.0"
    rulesMinimumPriority = 5
    ruleSets = ["${rootDir}/config/pmd/pmd-rulesets.xml"]
    sourceSets = [sourceSets.main]
    pmdMain {
        source = files(fileTree('src/main/java'))
        exclude '**/build/**'
    }
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        googleJavaFormat().reorderImports(true).skipJavadocFormatting().aosp()
        toggleOffOn()
        palantirJavaFormat()
        removeUnusedImports()
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
        importOrder('', 'javax', 'java', 'com.acme', '\\#')
                .wildcardsLast()
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
